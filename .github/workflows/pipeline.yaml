jobs: 
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: action/checkout@v2
      - run: dotnet build

    test:
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - run: dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover -pCoverletOutput='test_coverage/' -l trx -p 'test_result'
    
    analyze:
      needs:
        - build
        - test
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - run: dotnet tool installl -g dotnet-sonarscanner
        - run: dotnet-sonarscanner begin -k:'pizzabox' -o:'quatryle' -d.sonar:login=$SONAR_TOKEN -d:sonar.host.url:'sonar.io' -d sonar.cs.vstest.reportsPaths
        - run: dotnet build
        - run: dotnet-sonarscanner end -d:sonar.login=$SONAR_TOKEN

    package:
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
      needs:
        - analyze
        runs-on: ubuntu-20-04
        steps:
          - uses: actions/checkout@v2
          - run: echo @DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
          - run: docker image build -f DockerFile -t pizzabox .
          - run: docker image tag pizzabox quatryle/pizzabox
          - run: docker push quatryle/pizzabox
          - run: docker logout

    login:
        needs:
          - package
        runs-on: ubuntu-20.04
        steps:
            - users: azure/login@v1
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}

    deploy:
      needs:
        - package
      runs-on: ubuntu-20.04
      steps:
        - uses: azure/webapps-deploy@v2
        with:
          app-name: #'insert app name here'
          images: quatryle/pizzabox


name: ci-pipeline

on: push

